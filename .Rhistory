times <- strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
Data <- list(ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_cauchy_constant_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
compile('DM_cauchy_dyn_sig.cpp')
dyn.load(dynlib("DM_cauchy_dyn_sig"))
dat <- readLines('crk1.dat')
ncreeks <- gsub('\t', '', dat[2]) %>% as.numeric()
nrel <- gsub('\t', '', dat[4])  %>% as.numeric()
nsites <- gsub('\t', '', dat[6]) %>% as.numeric()
nperiods <- gsub('\t', '', dat[8]) %>% as.numeric()
ntraps <- gsub('\t', '', dat[10]) %>% as.numeric()
count.ls <- strsplit(dat[11 + 1:(ncreeks*nsites*nperiods)], '\t')
count.mat <- do.call(rbind, count.ls)[,1:ntraps] %>% apply(2, as.numeric)
distances <- strsplit(dat[13 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
times <- strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
Data <- list(ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_cauchy_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
dnorm(0, 0, .1)
21*24
survival
9*64*5
pc.wd <- 'C:/Users/Kiva Oken/Dropbox/Chapter2/'
my.wd <- pc.wd
setwd(paste(my.wd, 'R', sep=''))
source('pred-time-series.R')
setwd(paste(my.wd, 'R', sep=''))
source('tests_etc.R')
require(boot)
all.regions.byspp$reg.prey <- with(all.regions.byspp, paste(region, prey.spp))
calc.vf <- function(df) {
# Takes a data frame, groups it, and calculate the variance factors for each guild of predators
# Returns summarized data frame, with variance factor column
# df must contain certain column names for grouping purposes
var.of.sum <- group_by(df, region, prey.spp, year) %>%
summarize(sum.over.spp = sum(pred.signal)) %>%
summarize(var.of.sum = var(sum.over.spp))
sum.of.var <- group_by(df, region, prey.spp, species) %>%
summarize(var.by.spp = var(pred.signal)) %>%
summarize(sum.of.var = sum(var.by.spp), nspp = n())
vf.df <- right_join(var.of.sum, sum.of.var) %>%
mutate(vf = var.of.sum/sum.of.var) %>% select(-sum.of.var, -var.of.sum)
return(vf.df)
}
calc.boot.vf <- function(boot.ls) {
# Calculate variance factor for a set of bootstrapped time series, where each predator
# species is a matrix element of boot.ls, with rows for bootstrap iterations and columns
# for year
# Returns vector of bootstrapped variance factors
boot.arr <- sapply(boot.ls, identity, simplify = 'array')
var.of.sum <- apply(boot.arr, c(1,2), sum) %>% apply(1, var) # First sum spp, then take variance
sum.of.var <- apply(boot.arr, c(1,3), var) %>% apply(1, sum) # First take variance, then sum spp
vf <- var.of.sum/sum.of.var
return(vf)
}
ordered.preds.short <- filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring') %>%
group_by(region, prey.spp, species) %>%
summarize(avg_pred = mean(pred.signal)) %>% arrange(desc(avg_pred)) %>%
mutate(rank=order(avg_pred, decreasing = TRUE), pred.prop=cumsum(avg_pred/sum(avg_pred)))
ordered.preds <- right_join(ordered.preds.short, all.regions.byspp)
cutoff.pct <- .9
fewer.preds <- summarize(ordered.preds.short, cutoff.no = sum(pred.prop<cutoff.pct) + 1) %>%
right_join(ordered.preds.short) %>% right_join(all.regions.byspp) %>%
filter(rank <= cutoff.no)
filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring')
filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring') %>% head()
filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring') %>%
group_by(region, prey.spp, species) %>%
summarize(avg_pred = mean(pred.signal))
filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring') %>%
group_by(region, prey.spp, species)
filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring') %>%
group_by(region, prey.spp, species) %>%
summarize(avg_pred = mean(pred.signal))
detach("package:dplyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:reshape2", unload=TRUE)
library("plyr", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
filter(all.regions.byspp, reg.prey != 'GoA Yellowfin sole',
reg.prey != 'BALT Atlantic herring') %>%
group_by(region, prey.spp, species) %>%
summarize(avg_pred = mean(pred.signal))
setwd(paste(my.wd, 'R', sep=''))
source('tests_etc.R')
setwd(paste(my.wd, 'figs', sep=''))
require(RColorBrewer)
require(gplots)
require(ggplot2)
require(colorspace)
cols <- brewer.pal(length(levels(compensation.few$region)), 'Set3')
cols[2] <- '#CDC673'
require(PBSmapping)
data(worldLL)
plotAtlantic=function(coast=worldLL,cutLon=191.5,xlim=c(-75,10),ylim=c(35,70), ...){
coast=as.character(substitute(coast))
eval(parse(text=paste("data(",coast,"); coast=",coast,sep="")))
z=coast$X>cutLon
coast$X[z]=coast$X[z]-360
if (is.null(xlim)) xlim=range(coast$X)
if (is.null(ylim)) ylim=range(coast$Y)
plotMap(coast,xlim=xlim,ylim=ylim,col='gray90', ...)
}
plotAtlantic(xlim=c(-180,60), ylim=c(35,85), axes=FALSE, xlab='', ylab='',
plt=c(.05, .95, .05, .95), border='gray65')
dev.off()
cols <- brewer.pal(length(levels(compensation.few$region)), 'Set3')
plotAtlantic(xlim=c(-180,60), ylim=c(35,85), axes=FALSE, xlab='', ylab='',
plt=c(.05, .95, .05, .95), border='gray65')
?epdf
?eps
arctan
tan
atan
curve((2/pi) * atan(x), from = 0, to = 5)
curve(1/pi*(atan(x) - atan(-x)), from =0, to=5, add=T, col='red')
curve(pcauchy(x, 0, 1), from=0, to=5, add=T)
pi
?dnbinom
compile('DM_dyn_sig.cpp')
require(dplyr)
require(TMB)
compile('DM_dyn_sig.cpp')
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
dat <- readLines('crk2.dat')
ncreeks <- gsub('\t', '', dat[2]) %>% as.numeric()
nrel <- gsub('\t', '', dat[4])  %>% as.numeric()
nsites <- gsub('\t', '', dat[6]) %>% as.numeric()
nperiods <- gsub('\t', '', dat[8]) %>% as.numeric()
ntraps <- gsub('\t', '', dat[10]) %>% as.numeric()
count.ls <- strsplit(dat[11 + 1:(ncreeks*nsites*nperiods)], '\t')
count.mat <- do.call(rbind, count.ls)[,1:ntraps] %>% apply(2, as.numeric)
distances <- strsplit(dat[13 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
times <- strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
Data <- list(disp_model = 1,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 2)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_syn_sig")
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
Data <- list(disp_model = 2,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 2)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
Data <- list(disp_model = 3,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 2)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
Data <- list(disp_model = 3,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 2)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
Data <- list(disp_model = 2,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 2)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
Data <- list(disp_model = 1,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 2)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(0.1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
Data <- list(disp_model = 1,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 5)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
Data <- list(disp_model = 2,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 5)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
Data <- list(disp_model = 3,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 5)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
require(dplyr)
require(TMB)
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
dat <- readLines('crk2.dat')
ncreeks <- gsub('\t', '', dat[2]) %>% as.numeric()
nrel <- gsub('\t', '', dat[4])  %>% as.numeric()
nsites <- gsub('\t', '', dat[6]) %>% as.numeric()
nperiods <- gsub('\t', '', dat[8]) %>% as.numeric()
ntraps <- gsub('\t', '', dat[10]) %>% as.numeric()
count.ls <- strsplit(dat[11 + 1:(ncreeks*nsites*nperiods)], '\t')
count.mat <- do.call(rbind, count.ls)[,1:ntraps] %>% apply(2, as.numeric)
distances <- strsplit(dat[13 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
times <- strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
Data <- list(disp_model = 1,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 5)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(1), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
model$report()
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
model$report()
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(5), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$report()
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
model$report()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = -1000)
summary(sdreport(model))
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = -1)
summary(sdreport(model))
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = 0)
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
Data <- list(disp_model = 1,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 5)
Parameters <- list(logit_survival = log(0.99)/log(.01),
logit_detectability = 0,
log_sig_disp = rep(log(5), nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, nperiods)),
upper = c(1, 1, rep(10000, nperiods))))
# Parameters <- list(logit_survival = log(0.99)/log(.01),
#                    logit_detectability = 0,
#                    log_sig_disp = rep(log(5), nperiods))
Parameters <- list(survival = (0.99)/(.01),
detectability = .5,
sig_disp = rep(5, nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, nperiods)),
upper = c(1, 1, rep(10000, nperiods)))
# Parameters <- list(logit_survival = log(0.99)/log(.01),
#                    logit_detectability = 0,
#                    log_sig_disp = rep(log(5), nperiods))
Parameters <- list(survival = .99,
detectability = .5,
sig_disp = rep(.1, nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, nperiods)),
upper = c(1, 1, rep(10000, nperiods)))
model$report()
Parameters <- list(survival = .99,
detectability = .5,
sig_disp = rep(5, nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, nperiods)),
upper = c(1, 1, rep(10000, nperiods)))
summary(sdreport(model))
# Parameters <- list(logit_survival = log(0.99)/log(.01),
#                    logit_detectability = 0,
#                    log_sig_disp = rep(log(5), nperiods))
Parameters <- list(survival = .5,
detectability = .5,
sig_disp = rep(5, nperiods))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, nperiods)),
upper = c(1, 1, rep(10000, nperiods)))
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
Parameters <- list(survival = .5,
detectability = .5,
sig_disp = rep(5, 1))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
m
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, 1)),
upper = c(1, 1, rep(10000, 1)))
summary(sdreport(model))
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, 1)),
upper = c(1, 1, rep(10000, 1)))
summary(sdreport(model))
model$report()
Data <- list(disp_model = 1,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
full_site_width = 10)
# Parameters <- list(logit_survival = log(0.99)/log(.01),
#                    logit_detectability = 0,
#                    log_sig_disp = rep(log(5), nperiods))
Parameters <- list(survival = .5,
detectability = .5,
sig_disp = rep(5, 1))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr, lower = c(0,0,rep(0.001, 1)),
upper = c(1, 1, rep(10000, 1)))
summary(sdreport(model))
model$report()
compile('DM_dyn_sig.cpp')
dyn.load(dynlib("DM_dyn_sig"))
model <- MakeADFun(Data, Parameters, DLL="DM_dyn_sig")
model$report()
curve(exp(-x), from =0, to=10)
curve(exp(-x)^2, from =0, to=10, add=T, col='red')
curve(exp(-x), from =4, to=10)
curve(exp(-x)^2, from =4, to=10, add=T, col='red')
curve(exp(-x)^4, from =4, to=10, add=T, col='red')
curve(exp(-x), from =4, to=10)
curve(exp(-x)^2, from =4, to=10, add=T, col='red')
curve(exp(-x)^4, from =4, to=10, add=T, col='blue')
curve(exp(-x), from =0, to=10)
curve(exp(-x)^2, from =0, to=10, add=T, col='red')
curve(exp(-x)^4, from =0, to=10, add=T, col='blue')
curve(dcauchy(x, 0, 1), add=T, col='green')
curve(dnorm(x), from =0, to=10, add=T, col='red')
curve(dexp(x)/2, from =0, to=10)
curve(dnorm(x), from =0, to=10, add=T, col='red')
curve(dcauchy(x, 0, 1), add=T, col='green')
curve(dnorm(x,0,1))
curve(dnorm(x,0,1), from =0, to=10)
curve(dnorm(x,0,2), from =0, to=10, add=T)
curve(dnorm(x,0,3), from =0, to=10, add=T)
curve(dnorm(x,0,4), from =0, to=10, add=T)
