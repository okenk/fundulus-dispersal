distances <- strsplit(dat[13 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
times <- strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>% as.numeric()
# Set up model
Data <- list(disp_model = 3,
# ncreeks = ncreeks,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
dist_cutoff = 50)
# Parameters <- list(logit_survival = log(0.99)/log(.01),
#                    logit_detectability = 0,
model <- MakeADFun(Data, Parameters, DLL="DM_MM_sig")
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(0, 0, 0, 0, 0), #, rep(.001, nperiods)),
upper = c(1, 100, 10000000, 10000000, 10000000))
summary(sdreport(model))
rnbinom(1, 10, 3)
rnbinom(1, mu = 10, size = 3)
rnbinom(1, mu = 10, size = 3.5)
2709*12
2518*12
2346*12
compile('DM_const_sig.cpp')
require(dplyr)
require(TMB)
compile('DM_const_sig.cpp')
compile('DM_MM_sig.cpp')
dyn.load(dynlib("DM_const_sig"))
dyn.load(dynlib("DM_MM_sig"))
# Read in data
read.data <- function(filename) {
dat <- readLines(filename)
ls.out <- list()
ls.out$ncreeks <- gsub('\t', '', dat[2]) %>% as.numeric()
ls.out$nrel <- gsub('\t', '', dat[4])  %>% as.numeric()
ls.out$nsites <- gsub('\t', '', dat[6]) %>% as.numeric()
ls.out$nperiods <- gsub('\t', '', dat[8]) %>% as.numeric()
ls.out$ntraps <- gsub('\t', '', dat[10]) %>% as.numeric()
count.ls <- with(ls.out,
strsplit(dat[11 + 1:(ncreeks*nsites*nperiods)], '\t'))
ls.out$count.mat <- do.call(rbind, count.ls)[,1:ls.out$ntraps] %>% apply(2, as.numeric)
ls.out$distances <- with(ls.out,
strsplit(dat[13 + ncreeks*nsites*nperiods], '\t')[[1]] %>%
as.numeric())
ls.out$times <- with(ls.out,
strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>%
as.numeric())
return(ls.out)
}
# Set up model
make.inputs <- function(dat.ls, disp.model, count.model, dist.cutoff) {
disp.model.num <- switch(disp.model,
normal = 1,
exponential = 2,
cauchy = 3)
if(is.null(disp.model.num))
stop('Please choose "normal", "exponential", or "cauchy" for dispersal model')
count.model.num <- switch(count.model,
poisson = 1,
neg.binom = 2)
if(is.null(count.model.num))
stop('Please choose "poisson" or "neg.binom" for count model')
Data <- with(dat.ls,
list(disp_model = disp.model.num,
count_model = count.model.num,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
dist_cutoff = dist.cutoff))
Map <- list()
if(count.model.num == 1) {
Map$overdispersion <- factor(NA)
}
return(list(Data = Data, Map = Map))
}
compile('DM_MM_sig.cpp')
dyn.load(dynlib("DM_MM_sig"))
Parameters <- list(
survival = .9,
detectability = .7,
sig_disp0 = 20,
sig_disp_sig = 1,
sig_disp_eps = rep(0, nperiods),
overdispersion = 1
)
creek=1
filename <- paste('Data/crk', creek, '.dat', sep='')
dat <- read.data(filename)
to.fit <- make.inputs(dat, 'normal', 'poisson', 50)
to.fit$Data$nperiods
Parameters <- list(
survival = .9,
detectability = .7,
sig_disp0 = 20,
sig_disp_sig = 1,
sig_disp_eps = rep(0, 9),
overdispersion = 1
)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_const_sig", map=to.fit$Map)
dyn.load(dynlib("DM_MM_sig"))
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = 0, #, rep(.001, nperiods)),
upper = 10000000)
warnings()
Opt$par
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)#,
warnings()
Opt$par
model$fn()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
Opt$par
summary(sdreport(model))
dyn.load(dynlib("DM_const_sig"))
Parameters <- list(
survival = .9,
detectability = .7,
sig_disp = 20,
overdispersion = 1
)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_const_sig", map=to.fit$Map)
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
report <- model$report()[[1]]
head(report)
colnames(report) <- c('obscount', 'predcount', 'times', 'distances', 'dist_factor')
head(report)
report <- model$report()[[1]] %>% data.frame()
names(report) <- c('obscount', 'predcount', 'times', 'distances', 'dist_factor')
head(report)
transmute(report, times=factor(times))
mutate(report, times=factor(times)) %>% head()
cols = heat.colors(length(unique)report$times)
cols = heat.colors(length(unique(report$times)))
cols
xx <- mutate(report, times=factor(times))
levels(xx$times)
with(xx, plot(x=distances, y=obscount, col=cols[times]))
cols <- terrain.colors(length(unique(report$times)))
with(xx, plot(x=distances, y=obscount, col=cols[times]))
with(xx, plot(x=distances, y=obscount, col=cols[times], cex=.5))
with(xx, plot(x=distances, y=obscount, col=cols[times], cex=.5, las=1))
cols <- topo.colors(length(unique(report$times)))
with(xx, plot(x=distances, y=obscount, col=cols[times], cex=.5, las=1))
cols <- heat.colors(length(unique(report$times)))
xx <- mutate(report, times=factor(times))
with(xx, plot(x=distances, y=obscount, col=cols[times], cex=.5, las=1))
with(xx, plot(x=distances, y=obscount, bg=cols[times], cex=.5, las=1
pch = 21))
with(xx, plot(x=distances, y=obscount, bg=cols[times], cex=.5, las=1,
pch = 21))
with(xx, plot(x=distances, y=obscount, bg=cols[times], cex=.75, las=1,
pch = 21))
length(unique(report$distances))
cols <- heat.colors(length(unique(report$distances)))
xx <- mutate(report, distances=factor(distances))
with(xx, plot(x=times, y=obscount, bg=cols[distances], cex=.75, las=1,
pch = 21))
cols <- heat.colors(length(unique(report$distances)))
xx <- mutate(report, distances=factor(distances))
with(xx, plot(x=log(times), y=obscount, bg=cols[distances], cex=.75, las=1,
pch = 21))
View(rep)
View(report)
to.fit$Data$nsites
to.fit$Data$distances
to.fit$Data$nperiods
cols <- heat.colors(length(unique(report$times)))
xx <- mutate(report, times=factor(times))
with(xx, plot(x=jitter(distances), y=obscount, bg=cols[times], cex=.75, las=1,
pch = 21))
with(xx, plot(x=jitter(distances), y=obscount, bg=cols[times], las=1,
pch = 21))
?qqnorm
require(dplyr)
require(TMB)
read.data <- function(filename) {
dat <- readLines(filename)
ls.out <- list()
ls.out$ncreeks <- gsub('\t', '', dat[2]) %>% as.numeric()
ls.out$nrel <- gsub('\t', '', dat[4])  %>% as.numeric()
ls.out$nsites <- gsub('\t', '', dat[6]) %>% as.numeric()
ls.out$nperiods <- gsub('\t', '', dat[8]) %>% as.numeric()
ls.out$ntraps <- gsub('\t', '', dat[10]) %>% as.numeric()
count.ls <- with(ls.out,
strsplit(dat[11 + 1:(ncreeks*nsites*nperiods)], '\t'))
ls.out$count.mat <- do.call(rbind, count.ls)[,1:ls.out$ntraps] %>% apply(2, as.numeric)
ls.out$distances <- with(ls.out,
strsplit(dat[13 + ncreeks*nsites*nperiods], '\t')[[1]] %>%
as.numeric())
ls.out$times <- with(ls.out,
strsplit(dat[15 + ncreeks*nsites*nperiods], '\t')[[1]] %>%
as.numeric())
return(ls.out)
}
# Set up model
make.inputs <- function(dat.ls, disp.model, count.model, dist.cutoff) {
disp.model.num <- switch(disp.model,
normal = 1,
exponential = 2,
cauchy = 3)
if(is.null(disp.model.num))
stop('Please choose "normal", "exponential", or "cauchy" for dispersal model')
count.model.num <- switch(count.model,
poisson = 1,
neg.binom = 2)
if(is.null(count.model.num))
stop('Please choose "poisson" or "neg.binom" for count model')
Data <- with(dat.ls,
list(disp_model = disp.model.num,
count_model = count.model.num,
nrel = nrel,
nsites = nsites,
nperiods = nperiods,
ntraps = ntraps,
countmat = count.mat,
distances = distances,
times = times,
dist_cutoff = dist.cutoff))
Map <- list()
if(count.model.num == 1) {
Map$overdispersion <- factor(NA)
}
return(list(Data = Data, Map = Map))
}
compile('DM_MM_sig.cpp')
dyn.load(dynlib("DM_MM_sig"))
Parameters <- list(
survival = .9,
detectability = .7,
sig_disp0 = 20,
sig_disp_sig = 1,
sig_disp_eps = rep(0, 9),
overdispersion = 1
)
Parameters <- list(
survival = .9,
detectability = .7,
sig_disp0 = 20,
sig_disp_sig = 1,
sig_disp_eps = rep(0, 9))#,
creek=1
filename <- paste('Data/crk', creek, '.dat', sep='')
dat <- read.data(filename)
to.fit <- make.inputs(dat, 'normal', 'poisson', 50)
str(to.fit)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
Parameters <- list(
survival = .9,
detectability = .7,
sig_disp0 = 20,
sig_disp_sig = 1,
sig_disp_eps = rep(0, 9),
overdispersion = 1
)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
warnings()
summary(sdreport(Opt))
summary(sdreport(model))
to.fit <- make.inputs(dat, 'exponential', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
to.fit <- make.inputs(dat, 'cauchy', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
?MakeADFun
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)),
random='sig_disp_eps')
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random='sig_disp_eps')
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
to.fit <- make.inputs(dat, 'normal', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random='sig_disp_eps')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
to.fit <- make.inputs(dat, 'normal', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random='sig_disp_eps')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
to.fit <- make.inputs(dat, 'exponential', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random='sig_disp_eps')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
to.fit$Map
to.fit$Map$sig_disp0 <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
to.fit <- make.inputs(dat, 'cauchy', 'poisson', 50)
to.fit$Map$sig_disp0 <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr,
lower = c(rep(0,4), rep(-10000,9)), #, rep(.001, nperiods)),
upper = c(1, rep(100000, 12)))
summary(sdreport(model))
warnings()
report <- model$report()[[1]] %>% data.frame()
names(report) <- c('obscount', 'predcount', 'times', 'distances', 'dist_factor')
plot(report$predcount, report$obscount)
abline(0,1)
compile('DM_MM_sig.cpp')
dnorm(0,0)
compile('DM_MM_sig.cpp')
compile('DM_MM_sig.cpp')
compile('DM_MM_sig.cpp')
dyn.load(dynlib("DM_MM_sig"))
Parameters <- list(
logit_survival = .9,
log_detectability = .7,
log_sig_disp0 = 20,
log_sig_disp_sig = 1,
sig_disp_eps = rep(0, 9),
log_overdispersion = 1
)
to.fit$Map$log_sig_disp0 <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
to.fit$Map
compile('DM_MM_sig.cpp')
log(.9)/log(.1)
logit
.9/.1
log(.9/.1)
Parameters <- list(
logit_survival = log(.9/.1)
log_detectability = log(.7),
log_sig_disp0 = log(20),
log_sig_disp_sig = log(1),
sig_disp_eps = rep(0, 9),
overdispersion = 1
)
Parameters <- list(
logit_survival = log(.9/.1),
log_detectability = log(.7),
log_sig_disp0 = log(20),
log_sig_disp_sig = log(1),
sig_disp_eps = rep(0, 9),
overdispersion = 1
)
filename <- paste('Data/crk', creek, '.dat', sep='')
dat <- read.data(filename)
to.fit <- make.inputs(dat, 'cauchy', 'poisson', 50)
to.fit$Map$log_sig_disp0 <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
dyn.load(dynlib("DM_MM_sig"))
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
to.fit <- make.inputs(dat, 'cauchy', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = sig_disp_eps)
model$env$beSilent()
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'sig_disp_eps')
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
?dlnorm
compile('DM_MM_sig.cpp')
compile('DM_MM_sig.cpp')
compile('DM_MM_sig.cpp')
compile('DM_MM_sig.cpp')
dyn.load(dynlib("DM_MM_sig"))
Parameters <- list(
logit_survival = log(.9/.1),
log_detectability = log(.7),
log_sig_disp_mu = log(20),
log_sig_disp_sig = log(1),
log_sig_disp = log(rep(20, 9)),
overdispersion = 1
)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'sig_disp_eps')
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'log_sig_disp')
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
exp(-.2)
exp(3.97)
to.fit <- make.inputs(dat, 'normal', 'poisson', 50)
# to.fit$Map$log_sig_disp0 <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
to.fit <- make.inputs(dat, 'normal', 'negative binomial', 50)
to.fit <- make.inputs(dat, 'normal', 'neg.binom', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
model$fn()
to.fit <- make.inputs(dat, 'normal', 'poisson', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
model$fn()
to.fit <- make.inputs(dat, 'exponential', 'neg.binom', 50)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
to.fit$Map$log_sig_disp_mu <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map,
random = 'log_sig_disp')
model$env$beSilent()
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
to.fit <- make.inputs(dat, 'normal', 'neg.binom', 50)
to.fit$Map$log_sig_disp_mu <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
#                     random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
to.fit <- make.inputs(dat, 'cauchy', 'neg.binom', 50)
to.fit$Map$log_sig_disp_mu <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
#                     random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
summary(sdreport(model))
model$fn()
to.fit <- make.inputs(dat, 'exponential', 'neg.binom', 50)
to.fit$Map$log_sig_disp_mu <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
#                     random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
model$fn()
to.fit <- make.inputs(dat, 'normal', 'neg.binom', 50)
to.fit$Map$log_sig_disp_mu <- to.fit$Map$log_sig_disp_sig <- factor(NA)
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
#                     random = 'log_sig_disp')
model$env$beSilent()
# Fit model
Opt = nlminb(start=model$par, objective=model$fn, gradient=model$gr)
model$fn()
model <- MakeADFun(to.fit$Data, Parameters, DLL="DM_MM_sig", map=to.fit$Map)
model$fn()
require(ggplot2)
